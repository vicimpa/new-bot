import { guildId, sponsors, qiwiPrivate } from "~/config"
import {
  SlashCommand,
  CommandOptionType,
  SlashCreator,
  CommandContext,
  ConvertedOption
} from "slash-create"
import { permission } from "~/lib/permissions"
import { Logger } from "~/lib/logger"
import { TempRoles } from "~/services/temps"
import { MyDate } from "~/lib/mydate"
import { QiwiPaymentsAPI } from "@vicimpa/qiwi-sdk";
import { PaymentModel } from "~/models/Payment";
import { timeparser } from "../lib/timeparser"

const {
  INTEGER: Int,
  STRING: Str,
  USER: User,
  SUB_COMMAND: Sub
} = CommandOptionType

const api = new TempRoles()
const qiwi = new QiwiPaymentsAPI(qiwiPrivate)

class Donate extends SlashCommand {
  filePath = __filename
  guildID = guildId

  constructor(creator: SlashCreator) {
    super(creator, {
      name: 'donate',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–æ–º',
      options: [
        {
          type: Sub,
          name: 'status',
          description: '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–Ω–∞—Ç–Ω–æ–π —Ä–æ–ª–∏',
          options: [
            {
              type: User,
              name: 'user',
              description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π —Å—Ç–∞—Ç—É—Å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å'
            }
          ]
        },
        {
          type: Sub,
          name: 'message',
          description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          options: [
            {
              type: Int,
              name: 'sum',
              description: '–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å',
              required: true
            },
            {
              type: Str,
              name: 'message',
              description: '–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.',
              required: true
            }
          ]
        },
        {
          type: Sub,
          name: 'role',
          description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å —Å–ø–æ–Ω—Å–æ—Ä–∞',
          options: [
            {
              type: Str,
              name: 'role',
              required: true,
              description: '–†–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.',
              choices: sponsors.map(({ id, name, price }) => {
                return { name: `${name} (–æ—Ç ${price}—Ä—É–±)`, value: id }
              })
            },
            {
              type: Int,
              name: 'sum',
              description: '–°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –Ω–∏–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏.'
            }
          ]
        }
      ]
    })
  }

  @permission('donate.status')
  async status(ctx: CommandContext, opt: ConvertedOption) {
    const { user = ctx.member.id } = opt as any

    const donate = await api.getDonate(user)
    const target = user == ctx.member.id ? '–í–∞—Å' : `<@${user}>`
    const pays = await PaymentModel.find({userId: user, isPay: true})
    const roles = pays.filter(e => e.type == 'role')
    const messages = pays.filter(e => e.type == 'message')

    const foot = (
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç —Ä–æ–ª–∏: **${roles.length}**\n` + 
      `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: **${messages.length}**\n` +
      `–°—É–º–º–∞ –≤—Å–µ—Ö –¥–æ–Ω–∞—Ç–æ–≤: **${pays.reduce((acc, v) => acc + v.amount, 0)} —Ä—É–±**`
    )
          
    if (donate) {
      const d = new MyDate(donate.endTime)
      return { 
        ephemeral: true,
        content:
          `–£ ${target} —Ä–æ–ª—å <@&${donate.roleId}>\n` +
          `–†–æ–ª—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: \`${d.format('DD.MM.YYYY hh:mm:ss')}\`\n` +
          foot
      }
    } else {
      return {
        ephemeral: true,
        content:
          `–£ ${target} –Ω–µ—Ç —Ä–æ–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ üò¢\n` + 
          foot
      }
    }
  }

  @permission('donate.role')
  async role(ctx: CommandContext, opt: ConvertedOption) {
    const { role = '', sum } = opt as any
    const findRole = sponsors.find(e => e.id == role)

    const donate = await api.getDonate(ctx.member.id)

    if (donate && donate.roleId != role) {
      const f = sponsors.find(e => e.id == donate.roleId)
      const d = new MyDate(donate.endTime)
      return {
        ephemeral: true,
        content:
          `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–æ–ª—å **<@&${findRole.id}>**, —Ç–∞–∫ –∫–∞–∫ —É –í–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–∞ **<@&${f.id}>**! ` +
          `–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ \`${d.format()}\` –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é.`
      }
    }

    let amount = sum || 0


    if (typeof sum != 'number')
      amount = findRole.price

    if (amount < findRole.price)
      return {
        ephemeral: true,
        content:
          `–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ ${findRole.price} —Ä—É–±.`
      }
    
    const expirationDateTime = new Date(Date.now() + timeparser('5h'))

    const pay = new PaymentModel({ amount, type: 'role', data: role, userId: ctx.member.id })
    const bill = await qiwi.createBill(pay._id, {
      amount, currency: 'RUB', expirationDateTime
    })

    await pay.save()

    return {
      ephemeral: true,
      content: `[–°—Å—ã–ª–∫–∞](${bill.payUrl}) –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä–æ–ª–∏ <@&${role}>`
    }
  }

  @permission('donate.message')
  async message(ctx: CommandContext, opt: ConvertedOption) {
    const { message = '', sum = 0 } = opt as any
    const donate = await api.getDonate(ctx.member.id)
    const min = donate ? 10 : 50
    const amount = 0 || sum

    if (sum < min)
      return {
        ephemeral: true,
        content:
          `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –í–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${min} üò¢`
      }

    if(message.length < 3 || message.length > 1000)
      return {
        ephemeral: true,
        content:
          `–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 –∏ –±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤`
      }

    const expirationDateTime = new Date(Date.now() + timeparser('5h'))

    const pay = new PaymentModel({ amount, type: 'message', data: message, userId: ctx.member.id })
    const bill = await qiwi.createBill(pay._id, {
      amount, currency: 'RUB', expirationDateTime
    })

    await pay.save()

    return {
      ephemeral: true,
      content: `[–°—Å—ã–ª–∫–∞](${bill.payUrl}) –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è.`
    }
  }

  async run(ctx: CommandContext) {
    const { options } = ctx

    try {
      for (let key in options)
        if (typeof this[key] == 'function')
          if (this[key].name == 'value')
            return await this[key](ctx, options[key])

      throw new Error('No method!')
    } catch (e) {
      Logger.error(e)
      return {
        ephemeral: true,
        content: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ <@&805944675243917369>!`
      }
    }
  }
}

export = Donate